// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  account: (where?: AccountWhereInput) => Promise<boolean>;
  blockedUser: (where?: BlockedUserWhereInput) => Promise<boolean>;
  chatRoom: (where?: ChatRoomWhereInput) => Promise<boolean>;
  deactivate: (where?: DeactivateWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  payment: (where?: PaymentWhereInput) => Promise<boolean>;
  report: (where?: ReportWhereInput) => Promise<boolean>;
  room: (where?: RoomWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  account: (where: AccountWhereUniqueInput) => AccountNullablePromise;
  accounts: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Account>;
  accountsConnection: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccountConnectionPromise;
  blockedUser: (
    where: BlockedUserWhereUniqueInput
  ) => BlockedUserNullablePromise;
  blockedUsers: (args?: {
    where?: BlockedUserWhereInput;
    orderBy?: BlockedUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<BlockedUser>;
  blockedUsersConnection: (args?: {
    where?: BlockedUserWhereInput;
    orderBy?: BlockedUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BlockedUserConnectionPromise;
  chatRoom: (where: ChatRoomWhereUniqueInput) => ChatRoomNullablePromise;
  chatRooms: (args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ChatRoom>;
  chatRoomsConnection: (args?: {
    where?: ChatRoomWhereInput;
    orderBy?: ChatRoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChatRoomConnectionPromise;
  deactivate: (where: DeactivateWhereUniqueInput) => DeactivateNullablePromise;
  deactivates: (args?: {
    where?: DeactivateWhereInput;
    orderBy?: DeactivateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Deactivate>;
  deactivatesConnection: (args?: {
    where?: DeactivateWhereInput;
    orderBy?: DeactivateOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DeactivateConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  payment: (where: PaymentWhereUniqueInput) => PaymentNullablePromise;
  payments: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Payment>;
  paymentsConnection: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PaymentConnectionPromise;
  report: (where: ReportWhereUniqueInput) => ReportNullablePromise;
  reports: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Report>;
  reportsConnection: (args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReportConnectionPromise;
  room: (where: RoomWhereUniqueInput) => RoomNullablePromise;
  rooms: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Room>;
  roomsConnection: (args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RoomConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccount: (data: AccountCreateInput) => AccountPromise;
  updateAccount: (args: {
    data: AccountUpdateInput;
    where: AccountWhereUniqueInput;
  }) => AccountPromise;
  updateManyAccounts: (args: {
    data: AccountUpdateManyMutationInput;
    where?: AccountWhereInput;
  }) => BatchPayloadPromise;
  upsertAccount: (args: {
    where: AccountWhereUniqueInput;
    create: AccountCreateInput;
    update: AccountUpdateInput;
  }) => AccountPromise;
  deleteAccount: (where: AccountWhereUniqueInput) => AccountPromise;
  deleteManyAccounts: (where?: AccountWhereInput) => BatchPayloadPromise;
  createBlockedUser: (data: BlockedUserCreateInput) => BlockedUserPromise;
  updateBlockedUser: (args: {
    data: BlockedUserUpdateInput;
    where: BlockedUserWhereUniqueInput;
  }) => BlockedUserPromise;
  updateManyBlockedUsers: (args: {
    data: BlockedUserUpdateManyMutationInput;
    where?: BlockedUserWhereInput;
  }) => BatchPayloadPromise;
  upsertBlockedUser: (args: {
    where: BlockedUserWhereUniqueInput;
    create: BlockedUserCreateInput;
    update: BlockedUserUpdateInput;
  }) => BlockedUserPromise;
  deleteBlockedUser: (where: BlockedUserWhereUniqueInput) => BlockedUserPromise;
  deleteManyBlockedUsers: (
    where?: BlockedUserWhereInput
  ) => BatchPayloadPromise;
  createChatRoom: (data: ChatRoomCreateInput) => ChatRoomPromise;
  updateChatRoom: (args: {
    data: ChatRoomUpdateInput;
    where: ChatRoomWhereUniqueInput;
  }) => ChatRoomPromise;
  updateManyChatRooms: (args: {
    data: ChatRoomUpdateManyMutationInput;
    where?: ChatRoomWhereInput;
  }) => BatchPayloadPromise;
  upsertChatRoom: (args: {
    where: ChatRoomWhereUniqueInput;
    create: ChatRoomCreateInput;
    update: ChatRoomUpdateInput;
  }) => ChatRoomPromise;
  deleteChatRoom: (where: ChatRoomWhereUniqueInput) => ChatRoomPromise;
  deleteManyChatRooms: (where?: ChatRoomWhereInput) => BatchPayloadPromise;
  createDeactivate: (data: DeactivateCreateInput) => DeactivatePromise;
  updateDeactivate: (args: {
    data: DeactivateUpdateInput;
    where: DeactivateWhereUniqueInput;
  }) => DeactivatePromise;
  updateManyDeactivates: (args: {
    data: DeactivateUpdateManyMutationInput;
    where?: DeactivateWhereInput;
  }) => BatchPayloadPromise;
  upsertDeactivate: (args: {
    where: DeactivateWhereUniqueInput;
    create: DeactivateCreateInput;
    update: DeactivateUpdateInput;
  }) => DeactivatePromise;
  deleteDeactivate: (where: DeactivateWhereUniqueInput) => DeactivatePromise;
  deleteManyDeactivates: (where?: DeactivateWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createPayment: (data: PaymentCreateInput) => PaymentPromise;
  updatePayment: (args: {
    data: PaymentUpdateInput;
    where: PaymentWhereUniqueInput;
  }) => PaymentPromise;
  updateManyPayments: (args: {
    data: PaymentUpdateManyMutationInput;
    where?: PaymentWhereInput;
  }) => BatchPayloadPromise;
  upsertPayment: (args: {
    where: PaymentWhereUniqueInput;
    create: PaymentCreateInput;
    update: PaymentUpdateInput;
  }) => PaymentPromise;
  deletePayment: (where: PaymentWhereUniqueInput) => PaymentPromise;
  deleteManyPayments: (where?: PaymentWhereInput) => BatchPayloadPromise;
  createReport: (data: ReportCreateInput) => ReportPromise;
  updateReport: (args: {
    data: ReportUpdateInput;
    where: ReportWhereUniqueInput;
  }) => ReportPromise;
  updateManyReports: (args: {
    data: ReportUpdateManyMutationInput;
    where?: ReportWhereInput;
  }) => BatchPayloadPromise;
  upsertReport: (args: {
    where: ReportWhereUniqueInput;
    create: ReportCreateInput;
    update: ReportUpdateInput;
  }) => ReportPromise;
  deleteReport: (where: ReportWhereUniqueInput) => ReportPromise;
  deleteManyReports: (where?: ReportWhereInput) => BatchPayloadPromise;
  createRoom: (data: RoomCreateInput) => RoomPromise;
  updateRoom: (args: {
    data: RoomUpdateInput;
    where: RoomWhereUniqueInput;
  }) => RoomPromise;
  updateManyRooms: (args: {
    data: RoomUpdateManyMutationInput;
    where?: RoomWhereInput;
  }) => BatchPayloadPromise;
  upsertRoom: (args: {
    where: RoomWhereUniqueInput;
    create: RoomCreateInput;
    update: RoomUpdateInput;
  }) => RoomPromise;
  deleteRoom: (where: RoomWhereUniqueInput) => RoomPromise;
  deleteManyRooms: (where?: RoomWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  account: (
    where?: AccountSubscriptionWhereInput
  ) => AccountSubscriptionPayloadSubscription;
  blockedUser: (
    where?: BlockedUserSubscriptionWhereInput
  ) => BlockedUserSubscriptionPayloadSubscription;
  chatRoom: (
    where?: ChatRoomSubscriptionWhereInput
  ) => ChatRoomSubscriptionPayloadSubscription;
  deactivate: (
    where?: DeactivateSubscriptionWhereInput
  ) => DeactivateSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  payment: (
    where?: PaymentSubscriptionWhereInput
  ) => PaymentSubscriptionPayloadSubscription;
  report: (
    where?: ReportSubscriptionWhereInput
  ) => ReportSubscriptionPayloadSubscription;
  room: (
    where?: RoomSubscriptionWhereInput
  ) => RoomSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "bank_ASC"
  | "bank_DESC"
  | "accountNum_ASC"
  | "accountNum_DESC"
  | "owner_ASC"
  | "owner_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "userID_ASC"
  | "userID_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "state_ASC"
  | "state_DESC"
  | "school_ASC"
  | "school_DESC"
  | "major_ASC"
  | "major_DESC"
  | "studentNum_ASC"
  | "studentNum_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createDate_ASC"
  | "createDate_DESC";

export type RoomOrderByInput =
  | "roomID_ASC"
  | "roomID_DESC"
  | "when_ASC"
  | "when_DESC"
  | "roomGenderFilter_ASC"
  | "roomGenderFilter_DESC";

export type ReportOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "reason_ASC"
  | "reason_DESC"
  | "state_ASC"
  | "state_DESC";

export type BlockedUserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "deactivateDate_ASC"
  | "deactivateDate_DESC";

export type ChatRoomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC";

export type DeactivateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "why_ASC"
  | "why_DESC"
  | "deactivateReason_ASC"
  | "deactivateReason_DESC"
  | "deactivatedDate_ASC"
  | "deactivatedDate_DESC";

export type FileOrderByInput = "id_ASC" | "id_DESC" | "url_ASC" | "url_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "Latitude_ASC"
  | "Latitude_DESC"
  | "Longitude_ASC"
  | "Longitude_DESC";

export type PaymentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AccountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  bank?: Maybe<String>;
  bank_not?: Maybe<String>;
  bank_in?: Maybe<String[] | String>;
  bank_not_in?: Maybe<String[] | String>;
  bank_lt?: Maybe<String>;
  bank_lte?: Maybe<String>;
  bank_gt?: Maybe<String>;
  bank_gte?: Maybe<String>;
  bank_contains?: Maybe<String>;
  bank_not_contains?: Maybe<String>;
  bank_starts_with?: Maybe<String>;
  bank_not_starts_with?: Maybe<String>;
  bank_ends_with?: Maybe<String>;
  bank_not_ends_with?: Maybe<String>;
  accountNum?: Maybe<String>;
  accountNum_not?: Maybe<String>;
  accountNum_in?: Maybe<String[] | String>;
  accountNum_not_in?: Maybe<String[] | String>;
  accountNum_lt?: Maybe<String>;
  accountNum_lte?: Maybe<String>;
  accountNum_gt?: Maybe<String>;
  accountNum_gte?: Maybe<String>;
  accountNum_contains?: Maybe<String>;
  accountNum_not_contains?: Maybe<String>;
  accountNum_starts_with?: Maybe<String>;
  accountNum_not_starts_with?: Maybe<String>;
  accountNum_ends_with?: Maybe<String>;
  accountNum_not_ends_with?: Maybe<String>;
  owner?: Maybe<String>;
  owner_not?: Maybe<String>;
  owner_in?: Maybe<String[] | String>;
  owner_not_in?: Maybe<String[] | String>;
  owner_lt?: Maybe<String>;
  owner_lte?: Maybe<String>;
  owner_gt?: Maybe<String>;
  owner_gte?: Maybe<String>;
  owner_contains?: Maybe<String>;
  owner_not_contains?: Maybe<String>;
  owner_starts_with?: Maybe<String>;
  owner_not_starts_with?: Maybe<String>;
  owner_ends_with?: Maybe<String>;
  owner_not_ends_with?: Maybe<String>;
  AND?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  OR?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  NOT?: Maybe<AccountWhereInput[] | AccountWhereInput>;
}

export type BlockedUserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  userID?: Maybe<String>;
  userID_not?: Maybe<String>;
  userID_in?: Maybe<String[] | String>;
  userID_not_in?: Maybe<String[] | String>;
  userID_lt?: Maybe<String>;
  userID_lte?: Maybe<String>;
  userID_gt?: Maybe<String>;
  userID_gte?: Maybe<String>;
  userID_contains?: Maybe<String>;
  userID_not_contains?: Maybe<String>;
  userID_starts_with?: Maybe<String>;
  userID_not_starts_with?: Maybe<String>;
  userID_ends_with?: Maybe<String>;
  userID_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  profilePic?: Maybe<FileWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  school?: Maybe<String>;
  school_not?: Maybe<String>;
  school_in?: Maybe<String[] | String>;
  school_not_in?: Maybe<String[] | String>;
  school_lt?: Maybe<String>;
  school_lte?: Maybe<String>;
  school_gt?: Maybe<String>;
  school_gte?: Maybe<String>;
  school_contains?: Maybe<String>;
  school_not_contains?: Maybe<String>;
  school_starts_with?: Maybe<String>;
  school_not_starts_with?: Maybe<String>;
  school_ends_with?: Maybe<String>;
  school_not_ends_with?: Maybe<String>;
  accountInfo?: Maybe<AccountWhereInput>;
  major?: Maybe<String>;
  major_not?: Maybe<String>;
  major_in?: Maybe<String[] | String>;
  major_not_in?: Maybe<String[] | String>;
  major_lt?: Maybe<String>;
  major_lte?: Maybe<String>;
  major_gt?: Maybe<String>;
  major_gte?: Maybe<String>;
  major_contains?: Maybe<String>;
  major_not_contains?: Maybe<String>;
  major_starts_with?: Maybe<String>;
  major_not_starts_with?: Maybe<String>;
  major_ends_with?: Maybe<String>;
  major_not_ends_with?: Maybe<String>;
  studentNum?: Maybe<String>;
  studentNum_not?: Maybe<String>;
  studentNum_in?: Maybe<String[] | String>;
  studentNum_not_in?: Maybe<String[] | String>;
  studentNum_lt?: Maybe<String>;
  studentNum_lte?: Maybe<String>;
  studentNum_gt?: Maybe<String>;
  studentNum_gte?: Maybe<String>;
  studentNum_contains?: Maybe<String>;
  studentNum_not_contains?: Maybe<String>;
  studentNum_starts_with?: Maybe<String>;
  studentNum_not_starts_with?: Maybe<String>;
  studentNum_ends_with?: Maybe<String>;
  studentNum_not_ends_with?: Maybe<String>;
  currentRoom?: Maybe<RoomWhereInput>;
  rooms_every?: Maybe<RoomWhereInput>;
  rooms_some?: Maybe<RoomWhereInput>;
  rooms_none?: Maybe<RoomWhereInput>;
  ReportHistory_every?: Maybe<ReportWhereInput>;
  ReportHistory_some?: Maybe<ReportWhereInput>;
  ReportHistory_none?: Maybe<ReportWhereInput>;
  Blocking_every?: Maybe<UserWhereInput>;
  Blocking_some?: Maybe<UserWhereInput>;
  Blocking_none?: Maybe<UserWhereInput>;
  Blocked_every?: Maybe<UserWhereInput>;
  Blocked_some?: Maybe<UserWhereInput>;
  Blocked_none?: Maybe<UserWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export interface RoomWhereInput {
  roomID?: Maybe<ID_Input>;
  roomID_not?: Maybe<ID_Input>;
  roomID_in?: Maybe<ID_Input[] | ID_Input>;
  roomID_not_in?: Maybe<ID_Input[] | ID_Input>;
  roomID_lt?: Maybe<ID_Input>;
  roomID_lte?: Maybe<ID_Input>;
  roomID_gt?: Maybe<ID_Input>;
  roomID_gte?: Maybe<ID_Input>;
  roomID_contains?: Maybe<ID_Input>;
  roomID_not_contains?: Maybe<ID_Input>;
  roomID_starts_with?: Maybe<ID_Input>;
  roomID_not_starts_with?: Maybe<ID_Input>;
  roomID_ends_with?: Maybe<ID_Input>;
  roomID_not_ends_with?: Maybe<ID_Input>;
  Users_every?: Maybe<UserWhereInput>;
  Users_some?: Maybe<UserWhereInput>;
  Users_none?: Maybe<UserWhereInput>;
  chatting?: Maybe<ChatRoomWhereInput>;
  ready_every?: Maybe<UserWhereInput>;
  ready_some?: Maybe<UserWhereInput>;
  ready_none?: Maybe<UserWhereInput>;
  from?: Maybe<LocationWhereInput>;
  to?: Maybe<LocationWhereInput>;
  when?: Maybe<DateTimeInput>;
  when_not?: Maybe<DateTimeInput>;
  when_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  when_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  when_lt?: Maybe<DateTimeInput>;
  when_lte?: Maybe<DateTimeInput>;
  when_gt?: Maybe<DateTimeInput>;
  when_gte?: Maybe<DateTimeInput>;
  roomGenderFilter?: Maybe<Boolean>;
  roomGenderFilter_not?: Maybe<Boolean>;
  leader?: Maybe<UserWhereInput>;
  pay?: Maybe<PaymentWhereInput>;
  AND?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  OR?: Maybe<RoomWhereInput[] | RoomWhereInput>;
  NOT?: Maybe<RoomWhereInput[] | RoomWhereInput>;
}

export interface ChatRoomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  Users_every?: Maybe<UserWhereInput>;
  Users_some?: Maybe<UserWhereInput>;
  Users_none?: Maybe<UserWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
  AND?: Maybe<ChatRoomWhereInput[] | ChatRoomWhereInput>;
  OR?: Maybe<ChatRoomWhereInput[] | ChatRoomWhereInput>;
  NOT?: Maybe<ChatRoomWhereInput[] | ChatRoomWhereInput>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<UserWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createDate?: Maybe<DateTimeInput>;
  createDate_not?: Maybe<DateTimeInput>;
  createDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createDate_lt?: Maybe<DateTimeInput>;
  createDate_lte?: Maybe<DateTimeInput>;
  createDate_gt?: Maybe<DateTimeInput>;
  createDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  Latitude?: Maybe<Float>;
  Latitude_not?: Maybe<Float>;
  Latitude_in?: Maybe<Float[] | Float>;
  Latitude_not_in?: Maybe<Float[] | Float>;
  Latitude_lt?: Maybe<Float>;
  Latitude_lte?: Maybe<Float>;
  Latitude_gt?: Maybe<Float>;
  Latitude_gte?: Maybe<Float>;
  Longitude?: Maybe<Float>;
  Longitude_not?: Maybe<Float>;
  Longitude_in?: Maybe<Float[] | Float>;
  Longitude_not_in?: Maybe<Float[] | Float>;
  Longitude_lt?: Maybe<Float>;
  Longitude_lte?: Maybe<Float>;
  Longitude_gt?: Maybe<Float>;
  Longitude_gte?: Maybe<Float>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface PaymentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  unpaidUser_every?: Maybe<UserWhereInput>;
  unpaidUser_some?: Maybe<UserWhereInput>;
  unpaidUser_none?: Maybe<UserWhereInput>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  connectedRoom?: Maybe<RoomWhereInput>;
  AND?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  OR?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  NOT?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
}

export interface ReportWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  reportedUser?: Maybe<UserWhereInput>;
  from?: Maybe<UserWhereInput>;
  reason?: Maybe<String>;
  reason_not?: Maybe<String>;
  reason_in?: Maybe<String[] | String>;
  reason_not_in?: Maybe<String[] | String>;
  reason_lt?: Maybe<String>;
  reason_lte?: Maybe<String>;
  reason_gt?: Maybe<String>;
  reason_gte?: Maybe<String>;
  reason_contains?: Maybe<String>;
  reason_not_contains?: Maybe<String>;
  reason_starts_with?: Maybe<String>;
  reason_not_starts_with?: Maybe<String>;
  reason_ends_with?: Maybe<String>;
  reason_not_ends_with?: Maybe<String>;
  where?: Maybe<RoomWhereInput>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  OR?: Maybe<ReportWhereInput[] | ReportWhereInput>;
  NOT?: Maybe<ReportWhereInput[] | ReportWhereInput>;
}

export interface BlockedUserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  block?: Maybe<UserWhereInput>;
  deactivateDate?: Maybe<DateTimeInput>;
  deactivateDate_not?: Maybe<DateTimeInput>;
  deactivateDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deactivateDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deactivateDate_lt?: Maybe<DateTimeInput>;
  deactivateDate_lte?: Maybe<DateTimeInput>;
  deactivateDate_gt?: Maybe<DateTimeInput>;
  deactivateDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BlockedUserWhereInput[] | BlockedUserWhereInput>;
  OR?: Maybe<BlockedUserWhereInput[] | BlockedUserWhereInput>;
  NOT?: Maybe<BlockedUserWhereInput[] | BlockedUserWhereInput>;
}

export type ChatRoomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type DeactivateWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DeactivateWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  deactivateUser?: Maybe<UserWhereInput>;
  why?: Maybe<Int>;
  why_not?: Maybe<Int>;
  why_in?: Maybe<Int[] | Int>;
  why_not_in?: Maybe<Int[] | Int>;
  why_lt?: Maybe<Int>;
  why_lte?: Maybe<Int>;
  why_gt?: Maybe<Int>;
  why_gte?: Maybe<Int>;
  deactivateReason?: Maybe<String>;
  deactivateReason_not?: Maybe<String>;
  deactivateReason_in?: Maybe<String[] | String>;
  deactivateReason_not_in?: Maybe<String[] | String>;
  deactivateReason_lt?: Maybe<String>;
  deactivateReason_lte?: Maybe<String>;
  deactivateReason_gt?: Maybe<String>;
  deactivateReason_gte?: Maybe<String>;
  deactivateReason_contains?: Maybe<String>;
  deactivateReason_not_contains?: Maybe<String>;
  deactivateReason_starts_with?: Maybe<String>;
  deactivateReason_not_starts_with?: Maybe<String>;
  deactivateReason_ends_with?: Maybe<String>;
  deactivateReason_not_ends_with?: Maybe<String>;
  deactivatedDate?: Maybe<DateTimeInput>;
  deactivatedDate_not?: Maybe<DateTimeInput>;
  deactivatedDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deactivatedDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deactivatedDate_lt?: Maybe<DateTimeInput>;
  deactivatedDate_lte?: Maybe<DateTimeInput>;
  deactivatedDate_gt?: Maybe<DateTimeInput>;
  deactivatedDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DeactivateWhereInput[] | DeactivateWhereInput>;
  OR?: Maybe<DeactivateWhereInput[] | DeactivateWhereInput>;
  NOT?: Maybe<DeactivateWhereInput[] | DeactivateWhereInput>;
}

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PaymentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ReportWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type RoomWhereUniqueInput = AtLeastOne<{
  roomID: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  phoneNumber?: Maybe<String>;
  userID?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface AccountCreateInput {
  id?: Maybe<ID_Input>;
  bank: String;
  accountNum: String;
  owner: String;
}

export interface AccountUpdateInput {
  bank?: Maybe<String>;
  accountNum?: Maybe<String>;
  owner?: Maybe<String>;
}

export interface AccountUpdateManyMutationInput {
  bank?: Maybe<String>;
  accountNum?: Maybe<String>;
  owner?: Maybe<String>;
}

export interface BlockedUserCreateInput {
  id?: Maybe<ID_Input>;
  block: UserCreateOneInput;
  deactivateDate: DateTimeInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  phoneNumber: String;
  userID: String;
  email: String;
  password: String;
  profilePic?: Maybe<FileCreateOneInput>;
  name: String;
  gender: String;
  state?: Maybe<String>;
  school: String;
  accountInfo: AccountCreateOneInput;
  major?: Maybe<String>;
  studentNum?: Maybe<String>;
  currentRoom?: Maybe<RoomCreateOneInput>;
  rooms?: Maybe<RoomCreateManyInput>;
  ReportHistory?: Maybe<ReportCreateManyInput>;
  Blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
  Blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
}

export interface FileCreateOneInput {
  create?: Maybe<FileCreateInput>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
}

export interface AccountCreateOneInput {
  create?: Maybe<AccountCreateInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface RoomCreateOneInput {
  create?: Maybe<RoomCreateInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomCreateInput {
  roomID?: Maybe<ID_Input>;
  Users?: Maybe<UserCreateManyInput>;
  chatting: ChatRoomCreateOneInput;
  ready?: Maybe<UserCreateManyInput>;
  from: LocationCreateOneInput;
  to: LocationCreateOneInput;
  when: DateTimeInput;
  roomGenderFilter: Boolean;
  leader: UserCreateOneInput;
  pay?: Maybe<PaymentCreateOneWithoutConnectedRoomInput>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface ChatRoomCreateOneInput {
  create?: Maybe<ChatRoomCreateInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface ChatRoomCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  Users?: Maybe<UserCreateManyInput>;
  messages?: Maybe<MessageCreateManyInput>;
}

export interface MessageCreateManyInput {
  create?: Maybe<MessageCreateInput[] | MessageCreateInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  from: UserCreateOneInput;
  content: String;
  createDate: DateTimeInput;
}

export interface LocationCreateOneInput {
  create?: Maybe<LocationCreateInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  Latitude: Float;
  Longitude: Float;
}

export interface PaymentCreateOneWithoutConnectedRoomInput {
  create?: Maybe<PaymentCreateWithoutConnectedRoomInput>;
  connect?: Maybe<PaymentWhereUniqueInput>;
}

export interface PaymentCreateWithoutConnectedRoomInput {
  id?: Maybe<ID_Input>;
  unpaidUser?: Maybe<UserCreateManyInput>;
  price?: Maybe<Int>;
}

export interface RoomCreateManyInput {
  create?: Maybe<RoomCreateInput[] | RoomCreateInput>;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
}

export interface ReportCreateManyInput {
  create?: Maybe<ReportCreateInput[] | ReportCreateInput>;
  connect?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
}

export interface ReportCreateInput {
  id?: Maybe<ID_Input>;
  reportedUser: UserCreateOneInput;
  from: UserCreateOneInput;
  reason: String;
  where: RoomCreateOneInput;
  state: String;
}

export interface UserCreateManyWithoutBlockedInput {
  create?: Maybe<
    UserCreateWithoutBlockedInput[] | UserCreateWithoutBlockedInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutBlockedInput {
  id?: Maybe<ID_Input>;
  phoneNumber: String;
  userID: String;
  email: String;
  password: String;
  profilePic?: Maybe<FileCreateOneInput>;
  name: String;
  gender: String;
  state?: Maybe<String>;
  school: String;
  accountInfo: AccountCreateOneInput;
  major?: Maybe<String>;
  studentNum?: Maybe<String>;
  currentRoom?: Maybe<RoomCreateOneInput>;
  rooms?: Maybe<RoomCreateManyInput>;
  ReportHistory?: Maybe<ReportCreateManyInput>;
  Blocking?: Maybe<UserCreateManyWithoutBlockedInput>;
}

export interface UserCreateManyWithoutBlockingInput {
  create?: Maybe<
    UserCreateWithoutBlockingInput[] | UserCreateWithoutBlockingInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutBlockingInput {
  id?: Maybe<ID_Input>;
  phoneNumber: String;
  userID: String;
  email: String;
  password: String;
  profilePic?: Maybe<FileCreateOneInput>;
  name: String;
  gender: String;
  state?: Maybe<String>;
  school: String;
  accountInfo: AccountCreateOneInput;
  major?: Maybe<String>;
  studentNum?: Maybe<String>;
  currentRoom?: Maybe<RoomCreateOneInput>;
  rooms?: Maybe<RoomCreateManyInput>;
  ReportHistory?: Maybe<ReportCreateManyInput>;
  Blocked?: Maybe<UserCreateManyWithoutBlockingInput>;
}

export interface BlockedUserUpdateInput {
  block?: Maybe<UserUpdateOneRequiredInput>;
  deactivateDate?: Maybe<DateTimeInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  phoneNumber?: Maybe<String>;
  userID?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<FileUpdateOneInput>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  state?: Maybe<String>;
  school?: Maybe<String>;
  accountInfo?: Maybe<AccountUpdateOneRequiredInput>;
  major?: Maybe<String>;
  studentNum?: Maybe<String>;
  currentRoom?: Maybe<RoomUpdateOneInput>;
  rooms?: Maybe<RoomUpdateManyInput>;
  ReportHistory?: Maybe<ReportUpdateManyInput>;
  Blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  Blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
}

export interface FileUpdateOneInput {
  create?: Maybe<FileCreateInput>;
  update?: Maybe<FileUpdateDataInput>;
  upsert?: Maybe<FileUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface FileUpdateDataInput {
  url?: Maybe<String>;
}

export interface FileUpsertNestedInput {
  update: FileUpdateDataInput;
  create: FileCreateInput;
}

export interface AccountUpdateOneRequiredInput {
  create?: Maybe<AccountCreateInput>;
  update?: Maybe<AccountUpdateDataInput>;
  upsert?: Maybe<AccountUpsertNestedInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountUpdateDataInput {
  bank?: Maybe<String>;
  accountNum?: Maybe<String>;
  owner?: Maybe<String>;
}

export interface AccountUpsertNestedInput {
  update: AccountUpdateDataInput;
  create: AccountCreateInput;
}

export interface RoomUpdateOneInput {
  create?: Maybe<RoomCreateInput>;
  update?: Maybe<RoomUpdateDataInput>;
  upsert?: Maybe<RoomUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomUpdateDataInput {
  Users?: Maybe<UserUpdateManyInput>;
  chatting?: Maybe<ChatRoomUpdateOneRequiredInput>;
  ready?: Maybe<UserUpdateManyInput>;
  from?: Maybe<LocationUpdateOneRequiredInput>;
  to?: Maybe<LocationUpdateOneRequiredInput>;
  when?: Maybe<DateTimeInput>;
  roomGenderFilter?: Maybe<Boolean>;
  leader?: Maybe<UserUpdateOneRequiredInput>;
  pay?: Maybe<PaymentUpdateOneWithoutConnectedRoomInput>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  userID?: Maybe<String>;
  userID_not?: Maybe<String>;
  userID_in?: Maybe<String[] | String>;
  userID_not_in?: Maybe<String[] | String>;
  userID_lt?: Maybe<String>;
  userID_lte?: Maybe<String>;
  userID_gt?: Maybe<String>;
  userID_gte?: Maybe<String>;
  userID_contains?: Maybe<String>;
  userID_not_contains?: Maybe<String>;
  userID_starts_with?: Maybe<String>;
  userID_not_starts_with?: Maybe<String>;
  userID_ends_with?: Maybe<String>;
  userID_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  gender?: Maybe<String>;
  gender_not?: Maybe<String>;
  gender_in?: Maybe<String[] | String>;
  gender_not_in?: Maybe<String[] | String>;
  gender_lt?: Maybe<String>;
  gender_lte?: Maybe<String>;
  gender_gt?: Maybe<String>;
  gender_gte?: Maybe<String>;
  gender_contains?: Maybe<String>;
  gender_not_contains?: Maybe<String>;
  gender_starts_with?: Maybe<String>;
  gender_not_starts_with?: Maybe<String>;
  gender_ends_with?: Maybe<String>;
  gender_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  school?: Maybe<String>;
  school_not?: Maybe<String>;
  school_in?: Maybe<String[] | String>;
  school_not_in?: Maybe<String[] | String>;
  school_lt?: Maybe<String>;
  school_lte?: Maybe<String>;
  school_gt?: Maybe<String>;
  school_gte?: Maybe<String>;
  school_contains?: Maybe<String>;
  school_not_contains?: Maybe<String>;
  school_starts_with?: Maybe<String>;
  school_not_starts_with?: Maybe<String>;
  school_ends_with?: Maybe<String>;
  school_not_ends_with?: Maybe<String>;
  major?: Maybe<String>;
  major_not?: Maybe<String>;
  major_in?: Maybe<String[] | String>;
  major_not_in?: Maybe<String[] | String>;
  major_lt?: Maybe<String>;
  major_lte?: Maybe<String>;
  major_gt?: Maybe<String>;
  major_gte?: Maybe<String>;
  major_contains?: Maybe<String>;
  major_not_contains?: Maybe<String>;
  major_starts_with?: Maybe<String>;
  major_not_starts_with?: Maybe<String>;
  major_ends_with?: Maybe<String>;
  major_not_ends_with?: Maybe<String>;
  studentNum?: Maybe<String>;
  studentNum_not?: Maybe<String>;
  studentNum_in?: Maybe<String[] | String>;
  studentNum_not_in?: Maybe<String[] | String>;
  studentNum_lt?: Maybe<String>;
  studentNum_lte?: Maybe<String>;
  studentNum_gt?: Maybe<String>;
  studentNum_gte?: Maybe<String>;
  studentNum_contains?: Maybe<String>;
  studentNum_not_contains?: Maybe<String>;
  studentNum_starts_with?: Maybe<String>;
  studentNum_not_starts_with?: Maybe<String>;
  studentNum_ends_with?: Maybe<String>;
  studentNum_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  phoneNumber?: Maybe<String>;
  userID?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  state?: Maybe<String>;
  school?: Maybe<String>;
  major?: Maybe<String>;
  studentNum?: Maybe<String>;
}

export interface ChatRoomUpdateOneRequiredInput {
  create?: Maybe<ChatRoomCreateInput>;
  update?: Maybe<ChatRoomUpdateDataInput>;
  upsert?: Maybe<ChatRoomUpsertNestedInput>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface ChatRoomUpdateDataInput {
  title?: Maybe<String>;
  Users?: Maybe<UserUpdateManyInput>;
  messages?: Maybe<MessageUpdateManyInput>;
}

export interface MessageUpdateManyInput {
  create?: Maybe<MessageCreateInput[] | MessageCreateInput>;
  update?: Maybe<
    | MessageUpdateWithWhereUniqueNestedInput[]
    | MessageUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | MessageUpsertWithWhereUniqueNestedInput[]
    | MessageUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  connect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  set?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  disconnect?: Maybe<MessageWhereUniqueInput[] | MessageWhereUniqueInput>;
  deleteMany?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  updateMany?: Maybe<
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput
  >;
}

export interface MessageUpdateWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateDataInput;
}

export interface MessageUpdateDataInput {
  from?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
  createDate?: Maybe<DateTimeInput>;
}

export interface MessageUpsertWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateDataInput;
  create: MessageCreateInput;
}

export interface MessageScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createDate?: Maybe<DateTimeInput>;
  createDate_not?: Maybe<DateTimeInput>;
  createDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createDate_lt?: Maybe<DateTimeInput>;
  createDate_lte?: Maybe<DateTimeInput>;
  createDate_gt?: Maybe<DateTimeInput>;
  createDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  OR?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
  NOT?: Maybe<MessageScalarWhereInput[] | MessageScalarWhereInput>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageUpdateManyDataInput {
  content?: Maybe<String>;
  createDate?: Maybe<DateTimeInput>;
}

export interface ChatRoomUpsertNestedInput {
  update: ChatRoomUpdateDataInput;
  create: ChatRoomCreateInput;
}

export interface LocationUpdateOneRequiredInput {
  create?: Maybe<LocationCreateInput>;
  update?: Maybe<LocationUpdateDataInput>;
  upsert?: Maybe<LocationUpsertNestedInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface LocationUpdateDataInput {
  name?: Maybe<String>;
  Latitude?: Maybe<Float>;
  Longitude?: Maybe<Float>;
}

export interface LocationUpsertNestedInput {
  update: LocationUpdateDataInput;
  create: LocationCreateInput;
}

export interface PaymentUpdateOneWithoutConnectedRoomInput {
  create?: Maybe<PaymentCreateWithoutConnectedRoomInput>;
  update?: Maybe<PaymentUpdateWithoutConnectedRoomDataInput>;
  upsert?: Maybe<PaymentUpsertWithoutConnectedRoomInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PaymentWhereUniqueInput>;
}

export interface PaymentUpdateWithoutConnectedRoomDataInput {
  unpaidUser?: Maybe<UserUpdateManyInput>;
  price?: Maybe<Int>;
}

export interface PaymentUpsertWithoutConnectedRoomInput {
  update: PaymentUpdateWithoutConnectedRoomDataInput;
  create: PaymentCreateWithoutConnectedRoomInput;
}

export interface RoomUpsertNestedInput {
  update: RoomUpdateDataInput;
  create: RoomCreateInput;
}

export interface RoomUpdateManyInput {
  create?: Maybe<RoomCreateInput[] | RoomCreateInput>;
  update?: Maybe<
    | RoomUpdateWithWhereUniqueNestedInput[]
    | RoomUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | RoomUpsertWithWhereUniqueNestedInput[]
    | RoomUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  connect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  set?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  disconnect?: Maybe<RoomWhereUniqueInput[] | RoomWhereUniqueInput>;
  deleteMany?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  updateMany?: Maybe<
    RoomUpdateManyWithWhereNestedInput[] | RoomUpdateManyWithWhereNestedInput
  >;
}

export interface RoomUpdateWithWhereUniqueNestedInput {
  where: RoomWhereUniqueInput;
  data: RoomUpdateDataInput;
}

export interface RoomUpsertWithWhereUniqueNestedInput {
  where: RoomWhereUniqueInput;
  update: RoomUpdateDataInput;
  create: RoomCreateInput;
}

export interface RoomScalarWhereInput {
  roomID?: Maybe<ID_Input>;
  roomID_not?: Maybe<ID_Input>;
  roomID_in?: Maybe<ID_Input[] | ID_Input>;
  roomID_not_in?: Maybe<ID_Input[] | ID_Input>;
  roomID_lt?: Maybe<ID_Input>;
  roomID_lte?: Maybe<ID_Input>;
  roomID_gt?: Maybe<ID_Input>;
  roomID_gte?: Maybe<ID_Input>;
  roomID_contains?: Maybe<ID_Input>;
  roomID_not_contains?: Maybe<ID_Input>;
  roomID_starts_with?: Maybe<ID_Input>;
  roomID_not_starts_with?: Maybe<ID_Input>;
  roomID_ends_with?: Maybe<ID_Input>;
  roomID_not_ends_with?: Maybe<ID_Input>;
  when?: Maybe<DateTimeInput>;
  when_not?: Maybe<DateTimeInput>;
  when_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  when_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  when_lt?: Maybe<DateTimeInput>;
  when_lte?: Maybe<DateTimeInput>;
  when_gt?: Maybe<DateTimeInput>;
  when_gte?: Maybe<DateTimeInput>;
  roomGenderFilter?: Maybe<Boolean>;
  roomGenderFilter_not?: Maybe<Boolean>;
  AND?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  OR?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
  NOT?: Maybe<RoomScalarWhereInput[] | RoomScalarWhereInput>;
}

export interface RoomUpdateManyWithWhereNestedInput {
  where: RoomScalarWhereInput;
  data: RoomUpdateManyDataInput;
}

export interface RoomUpdateManyDataInput {
  when?: Maybe<DateTimeInput>;
  roomGenderFilter?: Maybe<Boolean>;
}

export interface ReportUpdateManyInput {
  create?: Maybe<ReportCreateInput[] | ReportCreateInput>;
  update?: Maybe<
    | ReportUpdateWithWhereUniqueNestedInput[]
    | ReportUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ReportUpsertWithWhereUniqueNestedInput[]
    | ReportUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  connect?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  set?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  disconnect?: Maybe<ReportWhereUniqueInput[] | ReportWhereUniqueInput>;
  deleteMany?: Maybe<ReportScalarWhereInput[] | ReportScalarWhereInput>;
  updateMany?: Maybe<
    | ReportUpdateManyWithWhereNestedInput[]
    | ReportUpdateManyWithWhereNestedInput
  >;
}

export interface ReportUpdateWithWhereUniqueNestedInput {
  where: ReportWhereUniqueInput;
  data: ReportUpdateDataInput;
}

export interface ReportUpdateDataInput {
  reportedUser?: Maybe<UserUpdateOneRequiredInput>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  reason?: Maybe<String>;
  where?: Maybe<RoomUpdateOneRequiredInput>;
  state?: Maybe<String>;
}

export interface RoomUpdateOneRequiredInput {
  create?: Maybe<RoomCreateInput>;
  update?: Maybe<RoomUpdateDataInput>;
  upsert?: Maybe<RoomUpsertNestedInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface ReportUpsertWithWhereUniqueNestedInput {
  where: ReportWhereUniqueInput;
  update: ReportUpdateDataInput;
  create: ReportCreateInput;
}

export interface ReportScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  reason?: Maybe<String>;
  reason_not?: Maybe<String>;
  reason_in?: Maybe<String[] | String>;
  reason_not_in?: Maybe<String[] | String>;
  reason_lt?: Maybe<String>;
  reason_lte?: Maybe<String>;
  reason_gt?: Maybe<String>;
  reason_gte?: Maybe<String>;
  reason_contains?: Maybe<String>;
  reason_not_contains?: Maybe<String>;
  reason_starts_with?: Maybe<String>;
  reason_not_starts_with?: Maybe<String>;
  reason_ends_with?: Maybe<String>;
  reason_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReportScalarWhereInput[] | ReportScalarWhereInput>;
  OR?: Maybe<ReportScalarWhereInput[] | ReportScalarWhereInput>;
  NOT?: Maybe<ReportScalarWhereInput[] | ReportScalarWhereInput>;
}

export interface ReportUpdateManyWithWhereNestedInput {
  where: ReportScalarWhereInput;
  data: ReportUpdateManyDataInput;
}

export interface ReportUpdateManyDataInput {
  reason?: Maybe<String>;
  state?: Maybe<String>;
}

export interface UserUpdateManyWithoutBlockedInput {
  create?: Maybe<
    UserCreateWithoutBlockedInput[] | UserCreateWithoutBlockedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutBlockedInput[]
    | UserUpdateWithWhereUniqueWithoutBlockedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutBlockedInput[]
    | UserUpsertWithWhereUniqueWithoutBlockedInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutBlockedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBlockedDataInput;
}

export interface UserUpdateWithoutBlockedDataInput {
  phoneNumber?: Maybe<String>;
  userID?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<FileUpdateOneInput>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  state?: Maybe<String>;
  school?: Maybe<String>;
  accountInfo?: Maybe<AccountUpdateOneRequiredInput>;
  major?: Maybe<String>;
  studentNum?: Maybe<String>;
  currentRoom?: Maybe<RoomUpdateOneInput>;
  rooms?: Maybe<RoomUpdateManyInput>;
  ReportHistory?: Maybe<ReportUpdateManyInput>;
  Blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
}

export interface UserUpsertWithWhereUniqueWithoutBlockedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBlockedDataInput;
  create: UserCreateWithoutBlockedInput;
}

export interface UserUpdateManyWithoutBlockingInput {
  create?: Maybe<
    UserCreateWithoutBlockingInput[] | UserCreateWithoutBlockingInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutBlockingInput[]
    | UserUpdateWithWhereUniqueWithoutBlockingInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutBlockingInput[]
    | UserUpsertWithWhereUniqueWithoutBlockingInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutBlockingInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutBlockingDataInput;
}

export interface UserUpdateWithoutBlockingDataInput {
  phoneNumber?: Maybe<String>;
  userID?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<FileUpdateOneInput>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  state?: Maybe<String>;
  school?: Maybe<String>;
  accountInfo?: Maybe<AccountUpdateOneRequiredInput>;
  major?: Maybe<String>;
  studentNum?: Maybe<String>;
  currentRoom?: Maybe<RoomUpdateOneInput>;
  rooms?: Maybe<RoomUpdateManyInput>;
  ReportHistory?: Maybe<ReportUpdateManyInput>;
  Blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
}

export interface UserUpsertWithWhereUniqueWithoutBlockingInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutBlockingDataInput;
  create: UserCreateWithoutBlockingInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface BlockedUserUpdateManyMutationInput {
  deactivateDate?: Maybe<DateTimeInput>;
}

export interface ChatRoomUpdateInput {
  title?: Maybe<String>;
  Users?: Maybe<UserUpdateManyInput>;
  messages?: Maybe<MessageUpdateManyInput>;
}

export interface ChatRoomUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface DeactivateCreateInput {
  id?: Maybe<ID_Input>;
  deactivateUser: UserCreateOneInput;
  why: Int;
  deactivateReason?: Maybe<String>;
  deactivatedDate: DateTimeInput;
}

export interface DeactivateUpdateInput {
  deactivateUser?: Maybe<UserUpdateOneRequiredInput>;
  why?: Maybe<Int>;
  deactivateReason?: Maybe<String>;
  deactivatedDate?: Maybe<DateTimeInput>;
}

export interface DeactivateUpdateManyMutationInput {
  why?: Maybe<Int>;
  deactivateReason?: Maybe<String>;
  deactivatedDate?: Maybe<DateTimeInput>;
}

export interface FileUpdateInput {
  url?: Maybe<String>;
}

export interface FileUpdateManyMutationInput {
  url?: Maybe<String>;
}

export interface LocationUpdateInput {
  name?: Maybe<String>;
  Latitude?: Maybe<Float>;
  Longitude?: Maybe<Float>;
}

export interface LocationUpdateManyMutationInput {
  name?: Maybe<String>;
  Latitude?: Maybe<Float>;
  Longitude?: Maybe<Float>;
}

export interface MessageUpdateInput {
  from?: Maybe<UserUpdateOneRequiredInput>;
  content?: Maybe<String>;
  createDate?: Maybe<DateTimeInput>;
}

export interface MessageUpdateManyMutationInput {
  content?: Maybe<String>;
  createDate?: Maybe<DateTimeInput>;
}

export interface PaymentCreateInput {
  id?: Maybe<ID_Input>;
  unpaidUser?: Maybe<UserCreateManyInput>;
  price?: Maybe<Int>;
  connectedRoom: RoomCreateOneWithoutPayInput;
}

export interface RoomCreateOneWithoutPayInput {
  create?: Maybe<RoomCreateWithoutPayInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomCreateWithoutPayInput {
  roomID?: Maybe<ID_Input>;
  Users?: Maybe<UserCreateManyInput>;
  chatting: ChatRoomCreateOneInput;
  ready?: Maybe<UserCreateManyInput>;
  from: LocationCreateOneInput;
  to: LocationCreateOneInput;
  when: DateTimeInput;
  roomGenderFilter: Boolean;
  leader: UserCreateOneInput;
}

export interface PaymentUpdateInput {
  unpaidUser?: Maybe<UserUpdateManyInput>;
  price?: Maybe<Int>;
  connectedRoom?: Maybe<RoomUpdateOneRequiredWithoutPayInput>;
}

export interface RoomUpdateOneRequiredWithoutPayInput {
  create?: Maybe<RoomCreateWithoutPayInput>;
  update?: Maybe<RoomUpdateWithoutPayDataInput>;
  upsert?: Maybe<RoomUpsertWithoutPayInput>;
  connect?: Maybe<RoomWhereUniqueInput>;
}

export interface RoomUpdateWithoutPayDataInput {
  Users?: Maybe<UserUpdateManyInput>;
  chatting?: Maybe<ChatRoomUpdateOneRequiredInput>;
  ready?: Maybe<UserUpdateManyInput>;
  from?: Maybe<LocationUpdateOneRequiredInput>;
  to?: Maybe<LocationUpdateOneRequiredInput>;
  when?: Maybe<DateTimeInput>;
  roomGenderFilter?: Maybe<Boolean>;
  leader?: Maybe<UserUpdateOneRequiredInput>;
}

export interface RoomUpsertWithoutPayInput {
  update: RoomUpdateWithoutPayDataInput;
  create: RoomCreateWithoutPayInput;
}

export interface PaymentUpdateManyMutationInput {
  price?: Maybe<Int>;
}

export interface ReportUpdateInput {
  reportedUser?: Maybe<UserUpdateOneRequiredInput>;
  from?: Maybe<UserUpdateOneRequiredInput>;
  reason?: Maybe<String>;
  where?: Maybe<RoomUpdateOneRequiredInput>;
  state?: Maybe<String>;
}

export interface ReportUpdateManyMutationInput {
  reason?: Maybe<String>;
  state?: Maybe<String>;
}

export interface RoomUpdateInput {
  Users?: Maybe<UserUpdateManyInput>;
  chatting?: Maybe<ChatRoomUpdateOneRequiredInput>;
  ready?: Maybe<UserUpdateManyInput>;
  from?: Maybe<LocationUpdateOneRequiredInput>;
  to?: Maybe<LocationUpdateOneRequiredInput>;
  when?: Maybe<DateTimeInput>;
  roomGenderFilter?: Maybe<Boolean>;
  leader?: Maybe<UserUpdateOneRequiredInput>;
  pay?: Maybe<PaymentUpdateOneWithoutConnectedRoomInput>;
}

export interface RoomUpdateManyMutationInput {
  when?: Maybe<DateTimeInput>;
  roomGenderFilter?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  phoneNumber?: Maybe<String>;
  userID?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  profilePic?: Maybe<FileUpdateOneInput>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  state?: Maybe<String>;
  school?: Maybe<String>;
  accountInfo?: Maybe<AccountUpdateOneRequiredInput>;
  major?: Maybe<String>;
  studentNum?: Maybe<String>;
  currentRoom?: Maybe<RoomUpdateOneInput>;
  rooms?: Maybe<RoomUpdateManyInput>;
  ReportHistory?: Maybe<ReportUpdateManyInput>;
  Blocking?: Maybe<UserUpdateManyWithoutBlockedInput>;
  Blocked?: Maybe<UserUpdateManyWithoutBlockingInput>;
}

export interface UserUpdateManyMutationInput {
  phoneNumber?: Maybe<String>;
  userID?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  gender?: Maybe<String>;
  state?: Maybe<String>;
  school?: Maybe<String>;
  major?: Maybe<String>;
  studentNum?: Maybe<String>;
}

export interface AccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccountWhereInput>;
  AND?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  OR?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  NOT?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
}

export interface BlockedUserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BlockedUserWhereInput>;
  AND?: Maybe<
    BlockedUserSubscriptionWhereInput[] | BlockedUserSubscriptionWhereInput
  >;
  OR?: Maybe<
    BlockedUserSubscriptionWhereInput[] | BlockedUserSubscriptionWhereInput
  >;
  NOT?: Maybe<
    BlockedUserSubscriptionWhereInput[] | BlockedUserSubscriptionWhereInput
  >;
}

export interface ChatRoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChatRoomWhereInput>;
  AND?: Maybe<
    ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput
  >;
  OR?: Maybe<ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput>;
  NOT?: Maybe<
    ChatRoomSubscriptionWhereInput[] | ChatRoomSubscriptionWhereInput
  >;
}

export interface DeactivateSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DeactivateWhereInput>;
  AND?: Maybe<
    DeactivateSubscriptionWhereInput[] | DeactivateSubscriptionWhereInput
  >;
  OR?: Maybe<
    DeactivateSubscriptionWhereInput[] | DeactivateSubscriptionWhereInput
  >;
  NOT?: Maybe<
    DeactivateSubscriptionWhereInput[] | DeactivateSubscriptionWhereInput
  >;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface PaymentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PaymentWhereInput>;
  AND?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  OR?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  NOT?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
}

export interface ReportSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReportWhereInput>;
  AND?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  OR?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
  NOT?: Maybe<ReportSubscriptionWhereInput[] | ReportSubscriptionWhereInput>;
}

export interface RoomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RoomWhereInput>;
  AND?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  OR?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
  NOT?: Maybe<RoomSubscriptionWhereInput[] | RoomSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Account {
  id: ID_Output;
  bank: String;
  accountNum: String;
  owner: String;
}

export interface AccountPromise extends Promise<Account>, Fragmentable {
  id: () => Promise<ID_Output>;
  bank: () => Promise<String>;
  accountNum: () => Promise<String>;
  owner: () => Promise<String>;
}

export interface AccountSubscription
  extends Promise<AsyncIterator<Account>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  bank: () => Promise<AsyncIterator<String>>;
  accountNum: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<String>>;
}

export interface AccountNullablePromise
  extends Promise<Account | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  bank: () => Promise<String>;
  accountNum: () => Promise<String>;
  owner: () => Promise<String>;
}

export interface AccountConnection {
  pageInfo: PageInfo;
  edges: AccountEdge[];
}

export interface AccountConnectionPromise
  extends Promise<AccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccountEdge>>() => T;
  aggregate: <T = AggregateAccountPromise>() => T;
}

export interface AccountConnectionSubscription
  extends Promise<AsyncIterator<AccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccountSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountEdge {
  node: Account;
  cursor: String;
}

export interface AccountEdgePromise extends Promise<AccountEdge>, Fragmentable {
  node: <T = AccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccountEdgeSubscription
  extends Promise<AsyncIterator<AccountEdge>>,
    Fragmentable {
  node: <T = AccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccount {
  count: Int;
}

export interface AggregateAccountPromise
  extends Promise<AggregateAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccountSubscription
  extends Promise<AsyncIterator<AggregateAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BlockedUser {
  id: ID_Output;
  deactivateDate: DateTimeOutput;
}

export interface BlockedUserPromise extends Promise<BlockedUser>, Fragmentable {
  id: () => Promise<ID_Output>;
  block: <T = UserPromise>() => T;
  deactivateDate: () => Promise<DateTimeOutput>;
}

export interface BlockedUserSubscription
  extends Promise<AsyncIterator<BlockedUser>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  block: <T = UserSubscription>() => T;
  deactivateDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BlockedUserNullablePromise
  extends Promise<BlockedUser | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  block: <T = UserPromise>() => T;
  deactivateDate: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  phoneNumber: String;
  userID: String;
  email: String;
  password: String;
  name: String;
  gender: String;
  state: String;
  school: String;
  major?: String;
  studentNum?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  phoneNumber: () => Promise<String>;
  userID: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profilePic: <T = FilePromise>() => T;
  name: () => Promise<String>;
  gender: () => Promise<String>;
  state: () => Promise<String>;
  school: () => Promise<String>;
  accountInfo: <T = AccountPromise>() => T;
  major: () => Promise<String>;
  studentNum: () => Promise<String>;
  currentRoom: <T = RoomPromise>() => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ReportHistory: <T = FragmentableArray<Report>>(args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Blocking: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Blocked: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  userID: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profilePic: <T = FileSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  school: () => Promise<AsyncIterator<String>>;
  accountInfo: <T = AccountSubscription>() => T;
  major: () => Promise<AsyncIterator<String>>;
  studentNum: () => Promise<AsyncIterator<String>>;
  currentRoom: <T = RoomSubscription>() => T;
  rooms: <T = Promise<AsyncIterator<RoomSubscription>>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ReportHistory: <T = Promise<AsyncIterator<ReportSubscription>>>(args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Blocking: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Blocked: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  phoneNumber: () => Promise<String>;
  userID: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profilePic: <T = FilePromise>() => T;
  name: () => Promise<String>;
  gender: () => Promise<String>;
  state: () => Promise<String>;
  school: () => Promise<String>;
  accountInfo: <T = AccountPromise>() => T;
  major: () => Promise<String>;
  studentNum: () => Promise<String>;
  currentRoom: <T = RoomPromise>() => T;
  rooms: <T = FragmentableArray<Room>>(args?: {
    where?: RoomWhereInput;
    orderBy?: RoomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  ReportHistory: <T = FragmentableArray<Report>>(args?: {
    where?: ReportWhereInput;
    orderBy?: ReportOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Blocking: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  Blocked: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface File {
  id: ID_Output;
  url: String;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
}

export interface Room {
  roomID: ID_Output;
  when: DateTimeOutput;
  roomGenderFilter: Boolean;
}

export interface RoomPromise extends Promise<Room>, Fragmentable {
  roomID: () => Promise<ID_Output>;
  Users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chatting: <T = ChatRoomPromise>() => T;
  ready: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  from: <T = LocationPromise>() => T;
  to: <T = LocationPromise>() => T;
  when: () => Promise<DateTimeOutput>;
  roomGenderFilter: () => Promise<Boolean>;
  leader: <T = UserPromise>() => T;
  pay: <T = PaymentPromise>() => T;
}

export interface RoomSubscription
  extends Promise<AsyncIterator<Room>>,
    Fragmentable {
  roomID: () => Promise<AsyncIterator<ID_Output>>;
  Users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chatting: <T = ChatRoomSubscription>() => T;
  ready: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  from: <T = LocationSubscription>() => T;
  to: <T = LocationSubscription>() => T;
  when: () => Promise<AsyncIterator<DateTimeOutput>>;
  roomGenderFilter: () => Promise<AsyncIterator<Boolean>>;
  leader: <T = UserSubscription>() => T;
  pay: <T = PaymentSubscription>() => T;
}

export interface RoomNullablePromise
  extends Promise<Room | null>,
    Fragmentable {
  roomID: () => Promise<ID_Output>;
  Users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  chatting: <T = ChatRoomPromise>() => T;
  ready: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  from: <T = LocationPromise>() => T;
  to: <T = LocationPromise>() => T;
  when: () => Promise<DateTimeOutput>;
  roomGenderFilter: () => Promise<Boolean>;
  leader: <T = UserPromise>() => T;
  pay: <T = PaymentPromise>() => T;
}

export interface ChatRoom {
  id: ID_Output;
  title: String;
}

export interface ChatRoomPromise extends Promise<ChatRoom>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  Users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChatRoomSubscription
  extends Promise<AsyncIterator<ChatRoom>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  Users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = Promise<AsyncIterator<MessageSubscription>>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ChatRoomNullablePromise
  extends Promise<ChatRoom | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  Users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  messages: <T = FragmentableArray<Message>>(args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Message {
  id: ID_Output;
  content: String;
  createDate: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = UserPromise>() => T;
  content: () => Promise<String>;
  createDate: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: <T = UserSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  createDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: <T = UserPromise>() => T;
  content: () => Promise<String>;
  createDate: () => Promise<DateTimeOutput>;
}

export interface Location {
  id: ID_Output;
  name: String;
  Latitude: Float;
  Longitude: Float;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  Latitude: () => Promise<Float>;
  Longitude: () => Promise<Float>;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  Latitude: () => Promise<AsyncIterator<Float>>;
  Longitude: () => Promise<AsyncIterator<Float>>;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  Latitude: () => Promise<Float>;
  Longitude: () => Promise<Float>;
}

export interface Payment {
  id: ID_Output;
  price?: Int;
}

export interface PaymentPromise extends Promise<Payment>, Fragmentable {
  id: () => Promise<ID_Output>;
  unpaidUser: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  price: () => Promise<Int>;
  connectedRoom: <T = RoomPromise>() => T;
}

export interface PaymentSubscription
  extends Promise<AsyncIterator<Payment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  unpaidUser: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  price: () => Promise<AsyncIterator<Int>>;
  connectedRoom: <T = RoomSubscription>() => T;
}

export interface PaymentNullablePromise
  extends Promise<Payment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  unpaidUser: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  price: () => Promise<Int>;
  connectedRoom: <T = RoomPromise>() => T;
}

export interface Report {
  id: ID_Output;
  reason: String;
  state: String;
}

export interface ReportPromise extends Promise<Report>, Fragmentable {
  id: () => Promise<ID_Output>;
  reportedUser: <T = UserPromise>() => T;
  from: <T = UserPromise>() => T;
  reason: () => Promise<String>;
  where: <T = RoomPromise>() => T;
  state: () => Promise<String>;
}

export interface ReportSubscription
  extends Promise<AsyncIterator<Report>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  reportedUser: <T = UserSubscription>() => T;
  from: <T = UserSubscription>() => T;
  reason: () => Promise<AsyncIterator<String>>;
  where: <T = RoomSubscription>() => T;
  state: () => Promise<AsyncIterator<String>>;
}

export interface ReportNullablePromise
  extends Promise<Report | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  reportedUser: <T = UserPromise>() => T;
  from: <T = UserPromise>() => T;
  reason: () => Promise<String>;
  where: <T = RoomPromise>() => T;
  state: () => Promise<String>;
}

export interface BlockedUserConnection {
  pageInfo: PageInfo;
  edges: BlockedUserEdge[];
}

export interface BlockedUserConnectionPromise
  extends Promise<BlockedUserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BlockedUserEdge>>() => T;
  aggregate: <T = AggregateBlockedUserPromise>() => T;
}

export interface BlockedUserConnectionSubscription
  extends Promise<AsyncIterator<BlockedUserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BlockedUserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBlockedUserSubscription>() => T;
}

export interface BlockedUserEdge {
  node: BlockedUser;
  cursor: String;
}

export interface BlockedUserEdgePromise
  extends Promise<BlockedUserEdge>,
    Fragmentable {
  node: <T = BlockedUserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BlockedUserEdgeSubscription
  extends Promise<AsyncIterator<BlockedUserEdge>>,
    Fragmentable {
  node: <T = BlockedUserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBlockedUser {
  count: Int;
}

export interface AggregateBlockedUserPromise
  extends Promise<AggregateBlockedUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBlockedUserSubscription
  extends Promise<AsyncIterator<AggregateBlockedUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ChatRoomConnection {
  pageInfo: PageInfo;
  edges: ChatRoomEdge[];
}

export interface ChatRoomConnectionPromise
  extends Promise<ChatRoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChatRoomEdge>>() => T;
  aggregate: <T = AggregateChatRoomPromise>() => T;
}

export interface ChatRoomConnectionSubscription
  extends Promise<AsyncIterator<ChatRoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChatRoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChatRoomSubscription>() => T;
}

export interface ChatRoomEdge {
  node: ChatRoom;
  cursor: String;
}

export interface ChatRoomEdgePromise
  extends Promise<ChatRoomEdge>,
    Fragmentable {
  node: <T = ChatRoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChatRoomEdgeSubscription
  extends Promise<AsyncIterator<ChatRoomEdge>>,
    Fragmentable {
  node: <T = ChatRoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateChatRoom {
  count: Int;
}

export interface AggregateChatRoomPromise
  extends Promise<AggregateChatRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatRoomSubscription
  extends Promise<AsyncIterator<AggregateChatRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Deactivate {
  id: ID_Output;
  why: Int;
  deactivateReason?: String;
  deactivatedDate: DateTimeOutput;
}

export interface DeactivatePromise extends Promise<Deactivate>, Fragmentable {
  id: () => Promise<ID_Output>;
  deactivateUser: <T = UserPromise>() => T;
  why: () => Promise<Int>;
  deactivateReason: () => Promise<String>;
  deactivatedDate: () => Promise<DateTimeOutput>;
}

export interface DeactivateSubscription
  extends Promise<AsyncIterator<Deactivate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  deactivateUser: <T = UserSubscription>() => T;
  why: () => Promise<AsyncIterator<Int>>;
  deactivateReason: () => Promise<AsyncIterator<String>>;
  deactivatedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DeactivateNullablePromise
  extends Promise<Deactivate | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  deactivateUser: <T = UserPromise>() => T;
  why: () => Promise<Int>;
  deactivateReason: () => Promise<String>;
  deactivatedDate: () => Promise<DateTimeOutput>;
}

export interface DeactivateConnection {
  pageInfo: PageInfo;
  edges: DeactivateEdge[];
}

export interface DeactivateConnectionPromise
  extends Promise<DeactivateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeactivateEdge>>() => T;
  aggregate: <T = AggregateDeactivatePromise>() => T;
}

export interface DeactivateConnectionSubscription
  extends Promise<AsyncIterator<DeactivateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeactivateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeactivateSubscription>() => T;
}

export interface DeactivateEdge {
  node: Deactivate;
  cursor: String;
}

export interface DeactivateEdgePromise
  extends Promise<DeactivateEdge>,
    Fragmentable {
  node: <T = DeactivatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeactivateEdgeSubscription
  extends Promise<AsyncIterator<DeactivateEdge>>,
    Fragmentable {
  node: <T = DeactivateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeactivate {
  count: Int;
}

export interface AggregateDeactivatePromise
  extends Promise<AggregateDeactivate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeactivateSubscription
  extends Promise<AsyncIterator<AggregateDeactivate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PaymentConnection {
  pageInfo: PageInfo;
  edges: PaymentEdge[];
}

export interface PaymentConnectionPromise
  extends Promise<PaymentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PaymentEdge>>() => T;
  aggregate: <T = AggregatePaymentPromise>() => T;
}

export interface PaymentConnectionSubscription
  extends Promise<AsyncIterator<PaymentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PaymentEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePaymentSubscription>() => T;
}

export interface PaymentEdge {
  node: Payment;
  cursor: String;
}

export interface PaymentEdgePromise extends Promise<PaymentEdge>, Fragmentable {
  node: <T = PaymentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PaymentEdgeSubscription
  extends Promise<AsyncIterator<PaymentEdge>>,
    Fragmentable {
  node: <T = PaymentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePayment {
  count: Int;
}

export interface AggregatePaymentPromise
  extends Promise<AggregatePayment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePaymentSubscription
  extends Promise<AsyncIterator<AggregatePayment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReportConnection {
  pageInfo: PageInfo;
  edges: ReportEdge[];
}

export interface ReportConnectionPromise
  extends Promise<ReportConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReportEdge>>() => T;
  aggregate: <T = AggregateReportPromise>() => T;
}

export interface ReportConnectionSubscription
  extends Promise<AsyncIterator<ReportConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReportEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReportSubscription>() => T;
}

export interface ReportEdge {
  node: Report;
  cursor: String;
}

export interface ReportEdgePromise extends Promise<ReportEdge>, Fragmentable {
  node: <T = ReportPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReportEdgeSubscription
  extends Promise<AsyncIterator<ReportEdge>>,
    Fragmentable {
  node: <T = ReportSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReport {
  count: Int;
}

export interface AggregateReportPromise
  extends Promise<AggregateReport>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReportSubscription
  extends Promise<AsyncIterator<AggregateReport>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoomConnection {
  pageInfo: PageInfo;
  edges: RoomEdge[];
}

export interface RoomConnectionPromise
  extends Promise<RoomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoomEdge>>() => T;
  aggregate: <T = AggregateRoomPromise>() => T;
}

export interface RoomConnectionSubscription
  extends Promise<AsyncIterator<RoomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoomSubscription>() => T;
}

export interface RoomEdge {
  node: Room;
  cursor: String;
}

export interface RoomEdgePromise extends Promise<RoomEdge>, Fragmentable {
  node: <T = RoomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoomEdgeSubscription
  extends Promise<AsyncIterator<RoomEdge>>,
    Fragmentable {
  node: <T = RoomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRoom {
  count: Int;
}

export interface AggregateRoomPromise
  extends Promise<AggregateRoom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoomSubscription
  extends Promise<AsyncIterator<AggregateRoom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AccountSubscriptionPayload {
  mutation: MutationType;
  node: Account;
  updatedFields: String[];
  previousValues: AccountPreviousValues;
}

export interface AccountSubscriptionPayloadPromise
  extends Promise<AccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccountPreviousValuesPromise>() => T;
}

export interface AccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccountPreviousValuesSubscription>() => T;
}

export interface AccountPreviousValues {
  id: ID_Output;
  bank: String;
  accountNum: String;
  owner: String;
}

export interface AccountPreviousValuesPromise
  extends Promise<AccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  bank: () => Promise<String>;
  accountNum: () => Promise<String>;
  owner: () => Promise<String>;
}

export interface AccountPreviousValuesSubscription
  extends Promise<AsyncIterator<AccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  bank: () => Promise<AsyncIterator<String>>;
  accountNum: () => Promise<AsyncIterator<String>>;
  owner: () => Promise<AsyncIterator<String>>;
}

export interface BlockedUserSubscriptionPayload {
  mutation: MutationType;
  node: BlockedUser;
  updatedFields: String[];
  previousValues: BlockedUserPreviousValues;
}

export interface BlockedUserSubscriptionPayloadPromise
  extends Promise<BlockedUserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BlockedUserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BlockedUserPreviousValuesPromise>() => T;
}

export interface BlockedUserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BlockedUserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BlockedUserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BlockedUserPreviousValuesSubscription>() => T;
}

export interface BlockedUserPreviousValues {
  id: ID_Output;
  deactivateDate: DateTimeOutput;
}

export interface BlockedUserPreviousValuesPromise
  extends Promise<BlockedUserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  deactivateDate: () => Promise<DateTimeOutput>;
}

export interface BlockedUserPreviousValuesSubscription
  extends Promise<AsyncIterator<BlockedUserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  deactivateDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChatRoomSubscriptionPayload {
  mutation: MutationType;
  node: ChatRoom;
  updatedFields: String[];
  previousValues: ChatRoomPreviousValues;
}

export interface ChatRoomSubscriptionPayloadPromise
  extends Promise<ChatRoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChatRoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatRoomPreviousValuesPromise>() => T;
}

export interface ChatRoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatRoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatRoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatRoomPreviousValuesSubscription>() => T;
}

export interface ChatRoomPreviousValues {
  id: ID_Output;
  title: String;
}

export interface ChatRoomPreviousValuesPromise
  extends Promise<ChatRoomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface ChatRoomPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatRoomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface DeactivateSubscriptionPayload {
  mutation: MutationType;
  node: Deactivate;
  updatedFields: String[];
  previousValues: DeactivatePreviousValues;
}

export interface DeactivateSubscriptionPayloadPromise
  extends Promise<DeactivateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DeactivatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DeactivatePreviousValuesPromise>() => T;
}

export interface DeactivateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeactivateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeactivateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DeactivatePreviousValuesSubscription>() => T;
}

export interface DeactivatePreviousValues {
  id: ID_Output;
  why: Int;
  deactivateReason?: String;
  deactivatedDate: DateTimeOutput;
}

export interface DeactivatePreviousValuesPromise
  extends Promise<DeactivatePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  why: () => Promise<Int>;
  deactivateReason: () => Promise<String>;
  deactivatedDate: () => Promise<DateTimeOutput>;
}

export interface DeactivatePreviousValuesSubscription
  extends Promise<AsyncIterator<DeactivatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  why: () => Promise<AsyncIterator<Int>>;
  deactivateReason: () => Promise<AsyncIterator<String>>;
  deactivatedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  url: String;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface LocationPreviousValues {
  id: ID_Output;
  name: String;
  Latitude: Float;
  Longitude: Float;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  Latitude: () => Promise<Float>;
  Longitude: () => Promise<Float>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  Latitude: () => Promise<AsyncIterator<Float>>;
  Longitude: () => Promise<AsyncIterator<Float>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  content: String;
  createDate: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  createDate: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  createDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PaymentSubscriptionPayload {
  mutation: MutationType;
  node: Payment;
  updatedFields: String[];
  previousValues: PaymentPreviousValues;
}

export interface PaymentSubscriptionPayloadPromise
  extends Promise<PaymentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PaymentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PaymentPreviousValuesPromise>() => T;
}

export interface PaymentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PaymentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PaymentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PaymentPreviousValuesSubscription>() => T;
}

export interface PaymentPreviousValues {
  id: ID_Output;
  price?: Int;
}

export interface PaymentPreviousValuesPromise
  extends Promise<PaymentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Int>;
}

export interface PaymentPreviousValuesSubscription
  extends Promise<AsyncIterator<PaymentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Int>>;
}

export interface ReportSubscriptionPayload {
  mutation: MutationType;
  node: Report;
  updatedFields: String[];
  previousValues: ReportPreviousValues;
}

export interface ReportSubscriptionPayloadPromise
  extends Promise<ReportSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReportPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReportPreviousValuesPromise>() => T;
}

export interface ReportSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReportSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReportSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReportPreviousValuesSubscription>() => T;
}

export interface ReportPreviousValues {
  id: ID_Output;
  reason: String;
  state: String;
}

export interface ReportPreviousValuesPromise
  extends Promise<ReportPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  reason: () => Promise<String>;
  state: () => Promise<String>;
}

export interface ReportPreviousValuesSubscription
  extends Promise<AsyncIterator<ReportPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  reason: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
}

export interface RoomSubscriptionPayload {
  mutation: MutationType;
  node: Room;
  updatedFields: String[];
  previousValues: RoomPreviousValues;
}

export interface RoomSubscriptionPayloadPromise
  extends Promise<RoomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RoomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RoomPreviousValuesPromise>() => T;
}

export interface RoomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RoomPreviousValuesSubscription>() => T;
}

export interface RoomPreviousValues {
  roomID: ID_Output;
  when: DateTimeOutput;
  roomGenderFilter: Boolean;
}

export interface RoomPreviousValuesPromise
  extends Promise<RoomPreviousValues>,
    Fragmentable {
  roomID: () => Promise<ID_Output>;
  when: () => Promise<DateTimeOutput>;
  roomGenderFilter: () => Promise<Boolean>;
}

export interface RoomPreviousValuesSubscription
  extends Promise<AsyncIterator<RoomPreviousValues>>,
    Fragmentable {
  roomID: () => Promise<AsyncIterator<ID_Output>>;
  when: () => Promise<AsyncIterator<DateTimeOutput>>;
  roomGenderFilter: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  phoneNumber: String;
  userID: String;
  email: String;
  password: String;
  name: String;
  gender: String;
  state: String;
  school: String;
  major?: String;
  studentNum?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  phoneNumber: () => Promise<String>;
  userID: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  gender: () => Promise<String>;
  state: () => Promise<String>;
  school: () => Promise<String>;
  major: () => Promise<String>;
  studentNum: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  userID: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  school: () => Promise<AsyncIterator<String>>;
  major: () => Promise<AsyncIterator<String>>;
  studentNum: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "Account",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  },
  {
    name: "ChatRoom",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Room",
    embedded: false
  },
  {
    name: "Payment",
    embedded: false
  },
  {
    name: "Report",
    embedded: false
  },
  {
    name: "BlockedUser",
    embedded: false
  },
  {
    name: "Deactivate",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
